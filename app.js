const express = require("express");
const http = require("http");
const socketIo = require('socket.io'); 

const path = require("path");
const app = express();
const PORT = process.env.PORT || 4000;
const server = app.listen(PORT, () => console.log(`üí¨ server on port ${PORT}`));
const io = socketIo(server);

app.use(express.static(path.join(__dirname, "public")));


let groupIds = new Set();
io.on('connection', (socket) => {
  console.log(socket.id,' connected');

  // X·ª≠ l√Ω s·ª± ki·ªán t·ª´ formNewGroup v√† formGroup
  socket.on("newGroupSubmission", (data) => {
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng tham s·ªë nh·∫≠n ƒë∆∞·ª£c t·ª´ form
    if (Object.keys(data).length === 4) {
      // Nh·∫≠n 4 tham s·ªë t·ª´ formNewGroup
      const { username, groupId, totalClient, password } = data;

      // Ki·ªÉm tra xem groupId ƒë√£ t·ªìn t·∫°i hay ch∆∞a
      if (!groupIds.has(groupId)) {
        // N·∫øu groupId ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi groupId v√†o danh s√°ch
        groupIds.add(groupId);
        console.log(socket.id, 'added new group: ', groupId)
        // T·∫°o c√°c thu·ªôc t√≠nh cho groupId
        // T·∫°o m·ªôt object ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin c·ªßa groupId
        const groupData = {
          clientConnected: new Set(),
          maxLength: totalClient,
          password: password,
        };

        // Th√™m groupId v√† th√¥ng tin t∆∞∆°ng ·ª©ng v√†o groupIds
        groupIds[groupId] = groupData;

        // Th√™m id c·ªßa client v√†o group v√† k·∫øt n·ªëi client v√†o group ƒë√≥
        groupIds[groupId].clientConnected.add(socket.id);

        // Redirect ƒë·∫øn chat.html v√† truy·ªÅn username th√¥ng qua URL query parameter
      const url = `../html/chat.html?username=${encodeURIComponent(username)}`;
      socket.emit("redirect", url);

        // K·∫øt n·ªëi client v√†o group
        socket.join(groupId);
      }
    } else if (Object.keys(data).length === 3) {
      // Nh·∫≠n 3 tham s·ªë t·ª´ formGroup
      const { username, groupId, password } = data;

      // Ki·ªÉm tra xem groupId c√≥ t·ªìn t·∫°i trong danh s√°ch hay kh√¥ng
      if (groupIds.has(groupId)) {
        const groupData = groupIds[groupId];

        // Ki·ªÉm tra xem s·ªë l∆∞·ª£ng clientConnected c·ªßa group c√≥ nh·ªè h∆°n maxLength hay kh√¥ng
        if (groupData.clientConnected.size < groupData.maxLength) {
          // Ki·ªÉm tra m·∫≠t kh·∫©u
          if (groupData.password === password) {
            // K·∫øt n·ªëi client v√†o group
            socket.join(groupId);

            // Th√™m id c·ªßa client v√†o group
            groupData.clientConnected.add(socket.id);

            // Emit th√¥ng tin username c·ªßa client ƒë·ªÉ m·ªü file chat.html
            socket.emit("open-chat", { username });
          }
        }
      }
    }
    socket.on("feedback", (data) => {
      socket.broadcast.emit("feedback", data);
    });
  });
})
